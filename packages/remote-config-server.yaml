name: Remote Config Server Package
version: 0.0.1

rules:
  - Always write valid TypeScript code

prompts:
  - name: Service Tests
    description: Write unit tests for a service class
    prompt: |
      Write a comprehensive set of unit tests for this service using Jest. You should avoid mocking things whenever possible. 

      If you need to use S3, there is a localstack instance set up on port 4566 that you can use for testing S3.

      For any datase-related stuff, you don't have to worry about set up because there's a test database already set up. You can see @services/control-plane/src/db/entity/TODO/services/PackageInviteService.test.ts as an example of how we do testing.

      Whenever it's reasonable, try to do testing just through the service, rather than directly interacting with the database.

  - name: New Component
    description: Create a new component
    prompt: |
      Create a new React component, following these rules:
      - Use shadcn/ui components wherever possible
      - Use Tailwind CSS for styling, with "colors-primary-brand" as the primary accent color and "colors-neutral-colors-grey" for all monotone colors
      - Make the component appropriately modular. If you need to map over any mid-sized element, you can break that out into a separate component in the same file. If it's larger, place it in an adjacent file
      - Write valid Next.js for the App router, which means setting "use client" at the top of the file if using state

docs:
  - name: "Tailwind CSS"
    startUrl: "https://tailwindcss.com/docs/installation"
    rootUrl: "https://tailwindcss.com/docs"
    faviconUrl: "https://tailwindcss.com/favicon.ico"

  - name: "React"
    startUrl: "https://react.dev/reference/"
    rootUrl: "https://react.dev/reference/"
    faviconUrl: "https://react.dev/favicon.ico"

  - name: "Next.js"
    startUrl: "https://nextjs.org/docs/app"

  - name: "TypeORM"
    startUrl: "https://typeorm.io/"

  - name: "tRPC"
    startUrl: "https://trpc.io/docs/"
